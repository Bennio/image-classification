apiVersion: kubeflow.org/v1beta1
kind: TFJob
metadata:
  name: {{.Values.tfjob.name}}
spec:
  tfReplicaSpecs:
    MASTER:
      replicas: 1
      template:
        spec:
          containers:
            - image: {{.Values.container.image}}:{{.Values.container.imageTag}}
              name: tensorflow
              args:                
                - "--bottleneck_dir=bottlenecks"
                - "--model_dir=/tmp/tensorflow/tf-output/inception"
                - "--summaries_dir=/tmp/tensorflow/tf-output/training_summaries/baseline"
                - "--output_graph=/tmp/tensorflow/tf-output/retrained_graph.pb"
                - "--output_labels=/tmp/tensorflow/tf-output/retrained_labels.txt"
                - "--image_dir=images"
                - "--saved_model_dir=/tmp/tensorflow/tf-output/saved_models/1"
                #- "--random_crop={{.Values.training.randomcrop}}"
                #- "--random_scale={{.Values.training.randomscale}}"
                #- "--random_brightness={{.Values.training.randombrightness}}"
                #- "--learning_rate={{.Values.training.learningrate}}"
                #- "--train_batch_size={{.Values.training.trainingbatchsize}}"
              resources:
                limits:
                  nvidia.com/gpu: 1
              volumeMounts:
                - name: {{.Values.container.pvcName}}
                  mountPath: /tmp/tensorflow
                  subPath: {{.Values.container.subPath}}
          restartPolicy: OnFailure
          volumes:
            - name: {{.Values.container.pvcName}}
              persistentVolumeClaim:
                claimName: {{.Values.container.pvcName}}